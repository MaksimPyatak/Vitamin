/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/modules/sign-up/add-file-name.js":
/*!*************************************************!*\
  !*** ./src/js/modules/sign-up/add-file-name.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nlet inputFile = document.querySelector('#file');\r\ninputFile.addEventListener('change', addFileName)\r\nfunction addFileName(e) {\r\n   console.log(e.target.files[0])\r\n   let fileInfo = document.querySelector('.add-file__info');\r\n   fileInfo.innerHTML = e.target.files[0].name;\r\n}\n\n//# sourceURL=webpack://gulp-2022/./src/js/modules/sign-up/add-file-name.js?");

/***/ }),

/***/ "./src/js/sign-up-wholesale-step-2.js":
/*!********************************************!*\
  !*** ./src/js/sign-up-wholesale-step-2.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utilits_classes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilits/classes.js */ \"./src/js/utilits/classes.js\");\n/* harmony import */ var _modules_sign_up_add_file_name_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/sign-up/add-file-name.js */ \"./src/js/modules/sign-up/add-file-name.js\");\n\r\n//import { auth, showLoginError, storage, db } from \"./modules/firebase.js\";\r\n\r\n//import { createUserWithEmailAndPassword, AuthErrorCodes } from \"firebase/auth\";\r\n//import { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\r\n//import { collection, addDoc } from \"firebase/firestore\";\r\n\r\n\r\n\r\n//const registrationTabs = new ClassToggler(\"tabs\", 'tabs__tab', \"add-file\");\r\n\r\n//const userProfile = {\r\n//   uid: '',\r\n//   email: '',\r\n//   first_name: '',\r\n//   last_name: '',\r\n//   password: '',\r\n//   file: {},\r\n//   wholesale: '',\r\n//};\r\nconst form = document.forms.sign_up;\r\nconst elForm = form.elements;\r\nconst regValidator = new _utilits_classes_js__WEBPACK_IMPORTED_MODULE_0__.Validator(form);\r\nconst submitBtn = form.querySelector('.sign-up__submit');\r\nform.elements.file.disabled = false;\r\nregValidator.blurValidation();\r\n\r\n//const origMethod = registrationTabs.changeClass.bind(registrationTabs);\r\n\r\n//registrationTabs.changeClass = function (e) {\r\n//   origMethod(e);\r\n//   validationForBtn();\r\n//}\r\n//registrationTabs.addListener();\r\n\r\nfor (let i = 0; i < form.elements.length; i++) {\r\n   const element = form.elements[i];\r\n   element.addEventListener('input', validationForBtn);\r\n}\r\nfunction validationForBtn() {\r\n   if (regValidator.backgroundValdation()) {\r\n      submitBtn.classList.remove('no-active-button');\r\n   } else {\r\n      submitBtn.classList.add('no-active-button');\r\n   }\r\n}\r\nform.addEventListener('submit', submitFormHandler);\r\nfunction submitFormHandler(event) {\r\n   event.preventDefault();\r\n\r\n   if (regValidator.validation()) {\r\n      //userProfile.email = elForm.email.value;\r\n      //userProfile.first_name = elForm.first.value;\r\n      //userProfile.last_name = elForm.last.value;\r\n      //userProfile.password = elForm.password.value;\r\n      ////userProfile.file = elForm.file.files[0];\r\n      //userProfile.wholesale = !elForm.file.disabled;\r\n\r\n      submitBtn.classList.add('no-active-button');\r\n      submitBtn.disabled = true;\r\n      submitBtn.style.cursor = 'not-allowed';\r\n      //createUserWithEmailAndPassword(auth, userProfile.email, userProfile.password)\r\n      //   .then((userCredential) => {\r\n      //      const user = userCredential.user;\r\n      //      console.log(user);\r\n      //      return user\r\n      //   })\r\n      //   .then((user) => {\r\n      //      userProfile.uid = user.uid;\r\n      //      if (userProfile.wholesale) {\r\n      //         const userFileRef = ref(storage, `/users/permissions/${Date.now()}${elForm.file.files[0].name}`)\r\n      //         return uploadBytes(userFileRef, elForm.file.files[0])\r\n      //      }\r\n      //      return\r\n      //   })\r\n      //   .then((uploadResult) => {\r\n      //      if (uploadResult) {\r\n      //         userProfile.file = {\r\n      //            name: uploadResult.metadata.name,\r\n      //            fullPath: uploadResult.metadata.fullPath\r\n      //         }\r\n      //      }\r\n      //      return\r\n      //   })\r\n      //   .then(() => {\r\n      //      return addDoc(collection(db, \"users\"), userProfile)\r\n      //   })\r\n      //   .then(() => window.location.replace(\"subscriptions.html\"))\r\n      //   .catch((error) => {\r\n      //      submitBtn.classList.remove('no-active-button')\r\n      //      submitBtn.disabled = false;\r\n      //      submitBtn.style.cursor = 'pointer';\r\n      //      switch (error.code) {\r\n      //         case AuthErrorCodes.EMAIL_EXISTS:\r\n      //            const message = `The entered e-mail is already registered.`;\r\n      //            regValidator.isError(message, email)\r\n      //            break;\r\n      //         //case AuthErrorCodes.EMAIL_EXISTS:\r\n\r\n      //         //break;\r\n      //         default:\r\n      //            console.log(error.message);\r\n      //            regValidator.isError(error.message, password)\r\n      //            break;\r\n      //      }\r\n      //   });\r\n      window.location.replace(\"subscriptions.html\")\r\n   }\r\n}\r\n\r\n\n\n//# sourceURL=webpack://gulp-2022/./src/js/sign-up-wholesale-step-2.js?");

/***/ }),

/***/ "./src/js/utilits/classes.js":
/*!***********************************!*\
  !*** ./src/js/utilits/classes.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClassToggler: () => (/* binding */ ClassToggler),\n/* harmony export */   Validator: () => (/* binding */ Validator)\n/* harmony export */ });\n/**\r\n         * Додає клас до елементу @param objectClass\r\n         * @param tabsClass клас об'єкта, де розміщені кнопки управління\r\n         * В об'єкті з класом @param tabsClass мають бути дата атрибут data-class-for-tab з назвою класу для підсвічування активної кнопки та дата атрибут data-class-for-obj, з назвою класу, що додається до @param objectClass\r\n         * @param tabClass клас кнопок, що керують @param objectClass\r\n         */\r\nclass ClassToggler {\r\n   constructor(tabsClass, tabClass, objectClass) {\r\n      this.tabsClass = tabsClass;\r\n      this.tabClass = tabClass;\r\n      this.objectClass = objectClass;\r\n   }\r\n   #tabs = null;\r\n   #tab = null;\r\n   #manipulationObject = null;\r\n   #classForTab = null;\r\n   #classForObj = null;\r\n\r\n   #getOllObject() {\r\n      this.#tabs = document.querySelector(`.${this.tabsClass}`);\r\n      if (this.#tabs) {\r\n         this.#tab = this.#tabs.getElementsByClassName(this.tabClass);\r\n         this.#classForTab = this.#tabs.dataset.classForTab;\r\n         this.#classForObj = this.#tabs.dataset.classForObj;\r\n      } else {\r\n         console.log(`Element containing class ${this.tabsClass} not found.`);\r\n      }\r\n      this.#manipulationObject = document.querySelector(`.${this.objectClass}`);\r\n   }\r\n\r\n   addListener() {\r\n      this.#getOllObject();\r\n      this.#tabs.addEventListener('click', (e) => this.changeClass(e))\r\n   }\r\n\r\n   changeClass(e) {\r\n      let btn = e.target.closest(`.${this.tabClass}`);\r\n      if (!btn) {\r\n         return\r\n      }\r\n      if (!this.#tabs.contains(btn)) {\r\n         return\r\n      }\r\n      this.#toggleClassOfElement();\r\n      this.#addClassToTab(btn);\r\n   }\r\n\r\n   #toggleClassOfElement() {\r\n      if (this.#manipulationObject) {\r\n         if (this.#classForObj) {\r\n            this.#manipulationObject.classList.toggle(this.#classForObj);\r\n            this.#searchInput(this.#manipulationObject);\r\n         } else {\r\n            console.log(`There are no data-${this.#classForObj} in the ${this.#tabs}`);\r\n         }\r\n      } else {\r\n         console.log(`Element containing class ${this.objectClass} not found.`);\r\n      }\r\n   }\r\n\r\n\r\n   #addClassToTab(tab) {\r\n      if (this.#classForTab) {\r\n         for (const element of this.#tab) {\r\n            element.classList.remove(this.#classForTab)\r\n         }\r\n      } else {\r\n         console.log(`There are no data-${this.#classForTab} in the ${this.#tabs}`);\r\n      }\r\n      tab.classList.add(this.#classForTab)\r\n   }\r\n\r\n   #searchInput(obj) {\r\n      let inputs = obj.querySelectorAll('input', 'select', 'textarea');\r\n      if (inputs.length) {\r\n         for (let i = 0; i < inputs.length; i++) {\r\n            const element = inputs[i];\r\n            let isDisabled = element.disabled;\r\n            element.disabled = !isDisabled;\r\n         }\r\n      }\r\n   }\r\n}\r\n\r\n//    #addClassToTab -- приватний клас\r\n//   iOS 14.5 підтримується на наступних пристроях Apple:\r\n//      - iPhone 6s і новіші моделі.\r\n//      - iPad Air 2 і новіші моделі.\r\n//      - iPad mini 4 і новіші моделі.\r\n//      - iPad (5-го покоління) і новіші моделі.\r\n//      - Всі моделі iPad Pro.\r\n//      - iPod touch (7-го покоління).\r\n\r\nclass Validator {\r\n   constructor(form) {\r\n      this.form = form;\r\n   }\r\n   errorFilds = document.querySelectorAll('.error');\r\n   emailRegExp = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$/;\r\n   ///^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,8})+$/;\r\n\r\n   validation(form = this.form) {\r\n      let isValid = true;\r\n      let n = null;\r\n      for (let i = 0; i < form.elements.length; i++) {\r\n         const element = form.elements[i];\r\n         let methodName = element.name + 'Test';\r\n         if (element.disabled) {\r\n            n++\r\n         } else if (typeof this[methodName] === \"function\") {\r\n            n += this[methodName](element);\r\n         } else {\r\n            n++\r\n         }\r\n      }\r\n      if (n !== form.elements.length) {\r\n         return false\r\n      } else {\r\n         console.log('Succses!');\r\n         return true\r\n      }\r\n   }\r\n   blurValidation(form = this.form) {\r\n      for (let i = 0; i < form.elements.length; i++) {\r\n         const element = form.elements[i];\r\n         if (element.name == 'file') {\r\n            break\r\n         }\r\n         element.addEventListener('blur', (e) => {\r\n            if (typeof this[element.name + 'Test'] == 'function') {\r\n               this[element.name + 'Test'](e.target)\r\n            }\r\n         });\r\n      }\r\n   }\r\n\r\n   backgroundValdation(form = this.form) {\r\n      let isValid = false;\r\n      let n = 0;\r\n      for (let i = 0; i < form.elements.length; i++) {\r\n         const element = form.elements[i];\r\n         if (element.disabled) {\r\n            n++\r\n         } else if (typeof this[element.name + 'ValidationForBtn'] == 'function') {\r\n            n += this[element.name + 'ValidationForBtn'](element) ? 1 : 0;\r\n         } else {\r\n            n++\r\n         }\r\n      }\r\n      return n == form.elements.length ? true : false\r\n   }\r\n\r\n   emailTest(input) {\r\n      if (input.value.length === 0) {\r\n         const message = \"Email can't be blank\"\r\n         this.isError(message, input);\r\n         input.classList.add('input-error');\r\n         input.addEventListener('input', (e) => this[input.name + 'Test'](input));\r\n         return null\r\n      } else if (!this.emailRegExp.test(input.value)) {\r\n         const message = \"Email is invalid\"\r\n         this.isError(message, input);\r\n         input.classList.add('input-error');\r\n         input.addEventListener('input', (e) => this[input.name + 'Test'](input));\r\n         return null\r\n      } else {\r\n         input.classList.remove('input-error');\r\n         this.removeError(input);\r\n         return 1\r\n      }\r\n   }\r\n   emailValidationForBtn(input) {\r\n      if (this.emailRegExp.test(input.value)) {\r\n         return true\r\n      } else {\r\n         return false\r\n      }\r\n   }\r\n   firstTest(input) {\r\n      if (input.value.length === 0) {\r\n         const message = \"Fild can't be blank\"\r\n         this.isError(message, input);\r\n         input.classList.add('input-error');\r\n         input.addEventListener('input', (e) => this[input.name + 'Test'](input));\r\n         return null\r\n      } else if (input.value.length < 3 || input.value.length > 15) {\r\n         const message = \"Fild must be at least 3 and no longer than 15 characters\"\r\n         this.isError(message, input);\r\n         input.classList.add('input-error');\r\n         input.addEventListener('input', (e) => this[input.name + 'Test'](input));\r\n         return null\r\n      } else {\r\n         input.classList.remove('input-error');\r\n         this.removeError(input);\r\n         return 1\r\n      }\r\n   }\r\n\r\n   firstValidationForBtn(input) {\r\n      if (input.value.length >= 3 && input.value.length <= 15) {\r\n         return true\r\n      } else {\r\n         return false\r\n      }\r\n   }\r\n\r\n   lastTest(input) {\r\n      return this.firstTest(input)\r\n   }\r\n\r\n   lastValidationForBtn(input) {\r\n      return this.firstValidationForBtn(input)\r\n   }\r\n\r\n   passwordTest(input) {\r\n      if (input.value.length === 0) {\r\n         const message = \"Password can't be blank\"\r\n         this.isError(message, input);\r\n         input.classList.add('input-error');\r\n         input.addEventListener('input', (e) => this[input.name + 'Test'](input));\r\n         return null\r\n      } else if (input.value.length < 6 || input.value.length > 15) {\r\n         const message = \"Password must be at least 6 and no longer than 15 characters\"\r\n         this.isError(message, input);\r\n         input.classList.add('input-error');\r\n         input.addEventListener('input', (e) => this[input.name + 'Test'](input));\r\n         return null\r\n      } else {\r\n         input.classList.remove('input-error');\r\n         this.removeError(input);\r\n         return 1\r\n      }\r\n   }\r\n\r\n   passwordValidationForBtn(input) {\r\n      if (input.value.length >= 6 && input.value.length <= 15) {\r\n         return true\r\n      } else {\r\n         return false\r\n      }\r\n   }\r\n\r\n   fileTest(input, form = this.form) {\r\n      let inputWrapper = input.closest('.input-file-wrapper');\r\n\r\n      if (!form.contains(inputWrapper)) {\r\n         inputWrapper = input;\r\n      }\r\n      let fileExtension\r\n      if (input.files.length) {\r\n         fileExtension = input.files[0].name.split('.').pop().toLowerCase();\r\n      }\r\n      if (input.files.length == 0) {\r\n         const message = \"File must be attached\"\r\n         this.isError(message, input);\r\n         inputWrapper.classList.add('input-error');\r\n         input.addEventListener('input', (e) => this[input.name + 'Test'](input));\r\n         return null\r\n      } else if (!['jpg', 'jpeg', 'png', 'gif', 'bmp', 'pdf'].includes(fileExtension)) {\r\n         const message = \"File must be image or PDF\"\r\n         this.isError(message, input);\r\n         inputWrapper.classList.add('input-error');\r\n         input.addEventListener('input', (e) => this[input.name + 'Test'](input));\r\n         return null\r\n      } else {\r\n         inputWrapper.classList.remove('input-error');\r\n         this.removeError(input);\r\n         return 1\r\n      }\r\n   }\r\n\r\n   fileValidationForBtn(input) {\r\n      let fileExtension\r\n      if (input.files.length) {\r\n         fileExtension = input.files[0].name.split('.').pop().toLowerCase();\r\n      }\r\n      if (input.value.length !== 0 && ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'pdf'].includes(fileExtension)) {\r\n         return true\r\n      } else {\r\n         return false\r\n      }\r\n   }\r\n\r\n   isError(message, input) {\r\n      this.errorFilds.forEach((el) => {\r\n         if (el.id == \"error-\" + input.name) {\r\n            let label = el.innerHTML\r\n            el.innerHTML = message;\r\n            return label\r\n         }\r\n      })\r\n   }\r\n\r\n   removeError(input) {\r\n      this.errorFilds.forEach((el) => {\r\n         if (el.id == \"error-\" + input.name) {\r\n            el.innerHTML = '';\r\n         }\r\n      })\r\n   }\r\n}\n\n//# sourceURL=webpack://gulp-2022/./src/js/utilits/classes.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/sign-up-wholesale-step-2.js");
/******/ 	
/******/ })()
;