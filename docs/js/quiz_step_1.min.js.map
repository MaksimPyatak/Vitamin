{"version":3,"file":"quiz_step_1.min.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,YAAY;AAC3E;AACA,KAAK;AACL;AACA;AACA,+DAA+D,YAAY;AAC3E;AACA,KAAK;AACL;AACA;AACA,+DAA+D,YAAY;AAC3E;AACA;AACA,C","sources":["webpack://gulp-2022/webpack/bootstrap","webpack://gulp-2022/webpack/runtime/make namespace object","webpack://gulp-2022/./src/js/quiz_step_1.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const nameInput = document.querySelector('#name');\r\nconst btn = document.querySelector('.quiz__btn');\r\nconst inputError = document.querySelector('.quiz__input-error');\r\nbtn.addEventListener('click', (event) => {\r\n   event.preventDefault();\r\n   if (validate(nameInput)) {\r\n      window.location.assign('quiz_step_2.html');\r\n   }\r\n});\r\nnameInput.addEventListener('blur', () => validate(nameInput));\r\n\r\nnameInput.addEventListener('input', activateBtn);\r\nfunction activateBtn() {\r\n   if (nameInput.value.length > 2 && nameInput.value.length < 16) {\r\n      btn.classList.add('quiz__btn--active');\r\n   } else {\r\n      btn.classList.remove('quiz__btn--active');\r\n   }\r\n}\r\n\r\nfunction validate(input) {\r\n   if (input.value.length === 0) {\r\n      inputError.innerHTML = \"Field can't be blank\";\r\n      input.classList.add('error');\r\n      input.addEventListener('input', () => validate(input), { once: true });\r\n      return false\r\n   } else if (input.value.length < 3 || input.value.length > 15) {\r\n      inputError.innerHTML = \"Field must be at least 3 and no longer than 15 characters\";\r\n      input.classList.add('error');\r\n      input.addEventListener('input', () => validate(input), { once: true });\r\n      return false\r\n   } else {\r\n      input.classList.remove('error');\r\n      inputError.innerHTML = \"\";\r\n      input.addEventListener('input', () => validate(input), { once: true });\r\n      return true\r\n   }\r\n}"],"names":[],"sourceRoot":""}