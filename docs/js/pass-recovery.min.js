/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/utilits/classes.js":
/*!***********************************!*\
  !*** ./src/js/utilits/classes.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ClassToggler: () => (/* binding */ ClassToggler),
/* harmony export */   Validator: () => (/* binding */ Validator)
/* harmony export */ });
/**
         * Додає клас до елементу @param objectClass
         * @param tabsClass клас об'єкта, де розміщені кнопки управління
         * В об'єкті з класом @param tabsClass мають бути дата атрибут data-class-for-tab з назвою класу для підсвічування активної кнопки та дата атрибут data-class-for-obj, з назвою класу, що додається до @param objectClass
         * @param tabClass клас кнопок, що керують @param objectClass
         */
class ClassToggler {
   constructor(tabsClass, tabClass, objectClass) {
      this.tabsClass = tabsClass;
      this.tabClass = tabClass;
      this.objectClass = objectClass;
   }
   #tabs = null;
   #tab = null;
   #manipulationObject = null;
   #classForTab = null;
   #classForObj = null;

   #getOllObject() {
      this.#tabs = document.querySelector(`.${this.tabsClass}`);
      if (this.#tabs) {
         this.#tab = this.#tabs.getElementsByClassName(this.tabClass);
         this.#classForTab = this.#tabs.dataset.classForTab;
         this.#classForObj = this.#tabs.dataset.classForObj;
      } else {
         console.log(`Element containing class ${this.tabsClass} not found.`);
      }
      this.#manipulationObject = document.querySelector(`.${this.objectClass}`);
   }

   addListener() {
      this.#getOllObject();
      this.#tabs.addEventListener('click', (e) => this.changeClass(e))
   }

   changeClass(e) {
      let btn = e.target.closest(`.${this.tabClass}`);
      if (!btn) {
         return
      }
      if (!this.#tabs.contains(btn)) {
         return
      }
      this.#toggleClassOfElement();
      this.#addClassToTab(btn);
   }

   #toggleClassOfElement() {
      if (this.#manipulationObject) {
         if (this.#classForObj) {
            this.#manipulationObject.classList.toggle(this.#classForObj);
            this.#searchInput(this.#manipulationObject);
         } else {
            console.log(`There are no data-${this.#classForObj} in the ${this.#tabs}`);
         }
      } else {
         console.log(`Element containing class ${this.objectClass} not found.`);
      }
   }


   #addClassToTab(tab) {
      if (this.#classForTab) {
         for (const element of this.#tab) {
            element.classList.remove(this.#classForTab)
         }
      } else {
         console.log(`There are no data-${this.#classForTab} in the ${this.#tabs}`);
      }
      tab.classList.add(this.#classForTab)
   }

   #searchInput(obj) {
      let inputs = obj.querySelectorAll('input', 'select', 'textarea');
      inputs.forEach((element) => {
         element.disabled = !element.disabled;
      });
   }
}

//    #addClassToTab -- приватний клас
//   iOS 14.5 підтримується на наступних пристроях Apple:
//      - iPhone 6s і новіші моделі.
//      - iPad Air 2 і новіші моделі.
//      - iPad mini 4 і новіші моделі.
//      - iPad (5-го покоління) і новіші моделі.
//      - Всі моделі iPad Pro.
//      - iPod touch (7-го покоління).

class Validator {
   constructor(form) {
      this.form = form;
   }
   errorFilds = document.querySelectorAll('.error');
   emailRegExp = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$/;
   ///^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,8})+$/;

   addressRegExp = /^[а-я\s.]+?\d+/i;            //???!!!!!
   expirationRegExp = /^(0[1-9]|1[0-2])\/\d{2}$/;

   validation(form = this.form) {
      let isValid = true;
      let n = null;
      for (let i = 0; i < form.elements.length; i++) {
         const element = form.elements[i];
         let methodName = element.name + 'Test';
         if (element.disabled) {
            n++
         } else if (typeof this[methodName] === "function") {
            n += this[methodName](element);
         } else {
            n++
         }
      }
      if (n !== form.elements.length) {
         return false
      } else {
         return true
      }
   }
   blurValidation(form = this.form) {
      for (let i = 0; i < form.elements.length; i++) {
         const element = form.elements[i];
         if (element.name == 'file') {
            break
         }
         element.addEventListener('blur', (e) => {
            if (typeof this[element.name + 'Test'] == 'function') {
               this[element.name + 'Test'](e.target);
            }
         });
      }
   }

   backgroundValdation(form = this.form) {
      //let isValid = false;
      let n = 0;
      for (let i = 0; i < form.elements.length; i++) {
         const element = form.elements[i];
         if (element.disabled) {
            n++
         } else if (typeof this[element.name + 'ValidationForBtn'] == 'function') {
            n += this[element.name + 'ValidationForBtn'](element) ? 1 : 0;
         } else {
            n++
         }
      }
      return n == form.elements.length ? true : false
   }

   emailTest(input) {
      if (input.value.length === 0) {
         const message = "Email can't be blank"
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else if (!this.emailRegExp.test(input.value)) {
         const message = "Email is invalid"
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else {
         input.classList.remove('input-error');
         this.removeError(input);
         return 1
      }
   }
   emailValidationForBtn(input) {
      if (this.emailRegExp.test(input.value)) {
         return true
      } else {
         return false
      }
   }
   firstTest(input) {
      if (input.value.length === 0) {
         const message = "Field can't be blank";
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else if (input.value.length < 3 || input.value.length > 15) {
         const message = "Field must be at least 3 and no longer than 15 characters";
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else {
         input.classList.remove('input-error');
         this.removeError(input);
         return 1
      }
   }

   firstValidationForBtn(input) {
      if (input.value.length >= 3 && input.value.length <= 15) {
         return true
      } else {
         return false
      }
   }

   lastTest(input) {
      return this.firstTest(input);
   }

   lastValidationForBtn(input) {
      return this.firstValidationForBtn(input);
   }

   passwordTest(input) {
      if (input.value.length === 0) {
         const message = "Password can't be blank";
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else if (input.value.length < 6 || input.value.length > 15) {
         const message = "Password must be at least 6 and no longer than 15 characters";
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else {
         input.classList.remove('input-error');
         this.removeError(input);
         return 1
      }
   }
   passwordValidationForBtn(input) {
      if (input.value.length >= 6 && input.value.length <= 15) {
         return true
      } else {
         return false
      }
   }

   current_passwordTest(input) {
      return this.passwordTest(input);
   }
   current_passwordValidationForBtn(input) {
      return this.passwordValidationForBtn(input);
   }

   new_passwordTest(input) {
      return this.passwordTest(input);
   }
   new_passwordValidationForBtn(input) {
      return this.passwordValidationForBtn(input);
   }

   confirm_new_passwordTest(input) {
      if (input.value.length === 0) {
         const message = "Password can't be blank";
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else if (input.value != this.form.elements.new_password.value) {
         const message = "Passwords must match";
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else {
         input.classList.remove('input-error');
         this.removeError(input);
         return 1
      }
   }
   confirm_new_passwordValidationForBtn(input) {
      if (input.value == this.form.elements.new_password.value) {
         return true
      } else {
         return false
      }
   }

   first_addressTest(input) {
      if (input.value.length === 0) {
         const message = "Field can't be blank"
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else if (input.value.length < 2) {
         const message = "Field must be at least 2 characters"
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      }
      else {
         input.classList.remove('input-error');
         this.removeError(input);
         return 1
      }
   }
   first_addressValidationForBtn(input) {
      if (input.value.length >= 2) {
         return true
      } else {
         return false
      }
   }

   cityTest(input) {
      if (input.value.length === 0) {
         const message = "Field can't be blank"
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else if (input.value.length < 2 || input.value.length > 15) {
         const message = "Field must be at least 2 and no longer than 15 characters"
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      }
      else {
         input.classList.remove('input-error');
         this.removeError(input);
         return 1
      }
   }
   cityValidationForBtn(input) {
      if (input.value.length >= 2 && input.value.length <= 15) {
         return true
      } else {
         return false
      }
   }

   stateTest(input) {
      const castomSelect = this.#findCastomSelect(input, 'new-select__header');
      if (input.value === "") {
         const message = "Select from the list";
         this.isError(message, input);
         if (castomSelect) {
            castomSelect.classList.add('input-error');
         }
         input.addEventListener('change', (e) => this[input.name + 'Test'](input));
         return null
      } else {
         if (castomSelect) {
            castomSelect.classList.remove('input-error');
         }
         this.removeError(input);
         return 1
      }
   }
   stateValidationForBtn(input) {
      if (!(input.value === null)) {
         return true
      } else {
         return false
      }
   }

   zipTest(input) {
      if (input.value.length === 0) {
         const message = "Field can't be blank"
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else if (input.value.length < 7) {
         const message = "The field must contain 6 digits"
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      }
      else {
         input.classList.remove('input-error');
         this.removeError(input);
         return 1
      }
   }
   zipValidationForBtn(input) {
      if (input.value.length === 7) {
         return true
      } else {
         return false
      }
   }

   phoneTest(input) {
      if (input.value.length === 0) {
         const message = "Field can't be blank"
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else if (input.value.length < 15) {
         const message = "The field must contain 11 digits"
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      }
      else {
         input.classList.remove('input-error');
         this.removeError(input);
         return 1
      }
   }
   phoneValidationForBtn(input) {
      if (input.value.length === 15) {
         return true
      } else {
         return false
      }
   }

   card_numberTest(input) {
      if (input.value.length === 0) {
         const message = "Field can't be blank"
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else if (input.value.length < 19) {
         const message = "The field must contain 16 digits"
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      }
      else {
         input.classList.remove('input-error');
         this.removeError(input);
         return 1
      }
   }
   card_numberValidationForBtn(input) {
      if (input.value.length === 19) {
         return true
      } else {
         return false
      }
   }

   card_expirationTest(input) {
      if (input.value.length === 0) {
         const message = "Field can't be blank"
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else if (!this.expirationRegExp.test(input.value)) {
         const message = "Field is invalid"
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else {
         input.classList.remove('input-error');
         this.removeError(input);
         return 1
      }
   }
   card_expirationValidationForBtn(input) {
      if (this.expirationRegExp.test(input.value)) {
         return true
      } else {
         return false
      }
   }
   card_cvcTest(input) {
      if (input.value.length === 0) {
         const message = "Field can't be blank"
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else if (input.value.length < 3) {
         const message = "The field must contain 3 digits"
         this.isError(message, input);
         input.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      }
      else {
         input.classList.remove('input-error');
         this.removeError(input);
         return 1
      }
   }
   card_cvcValidationForBtn(input) {
      if (input.value.length === 3) {
         return true
      } else {
         return false
      }
   }

   fileTest(input, form = this.form) {
      const inputWrapper = input.closest('.input-file-wrapper');

      if (!form.contains(inputWrapper)) {
         inputWrapper = input;
      }
      let fileExtension;
      if (input.files.length) {
         fileExtension = input.files[0].name.split('.').pop().toLowerCase();
      }
      if (input.dataset.isfile == 'true') {
         return 1
      }
      if (input.files.length == 0) {
         const message = "File must be attached";
         this.isError(message, input);
         inputWrapper.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else if (!['jpg', 'jpeg', 'png', 'gif', 'bmp', 'pdf'].includes(fileExtension)) {
         const message = "File must be image or PDF"
         this.isError(message, input);
         inputWrapper.classList.add('input-error');
         input.addEventListener('input', (e) => this[input.name + 'Test'](input), { once: true });
         return null
      } else {
         inputWrapper.classList.remove('input-error');
         this.removeError(input);
         return 1
      }
   }

   fileValidationForBtn(input) {
      let fileExtension
      if (input.files.length) {
         fileExtension = input.files[0].name.split('.').pop().toLowerCase();
      }
      if (input.dataset.isfile == 'true') {
         return true
      }
      if (input.value.length !== 0 && ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'pdf'].includes(fileExtension)) {
         return true
      } else {
         return false
      }
   }

   isError(message, input) {
      this.errorFilds.forEach((el) => {
         if (el.id == "error-" + input.name) {
            let label = el.innerHTML
            el.innerHTML = message;
            return label
         }
      })
   }

   removeError(input) {
      this.errorFilds.forEach((el) => {
         if (el.id == "error-" + input.name) {
            el.innerHTML = '';
         }
      })
   }

   #findCastomSelect(element, className) {
      let parent = element.parentElement;
      let child = parent.getElementsByClassName(className);
      if (child) {
         return child[0]
      } else {
         return
      }
   }
}

/***/ }),

/***/ "./src/js/utilits/function.js":
/*!************************************!*\
  !*** ./src/js/utilits/function.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   adjustOptionsListPosition: () => (/* binding */ adjustOptionsListPosition),
/* harmony export */   changeBackgrounHeader: () => (/* binding */ changeBackgrounHeader),
/* harmony export */   changeLogoOfHeader: () => (/* binding */ changeLogoOfHeader),
/* harmony export */   editCvc: () => (/* binding */ editCvc),
/* harmony export */   editExpiration: () => (/* binding */ editExpiration),
/* harmony export */   editNumberCard: () => (/* binding */ editNumberCard),
/* harmony export */   editPhone: () => (/* binding */ editPhone),
/* harmony export */   productsFilter: () => (/* binding */ productsFilter),
/* harmony export */   renderCard: () => (/* binding */ renderCard),
/* harmony export */   renderFilteredCards: () => (/* binding */ renderFilteredCards),
/* harmony export */   selectItem: () => (/* binding */ selectItem),
/* harmony export */   validationNumberInput: () => (/* binding */ validationNumberInput)
/* harmony export */ });
//import { signOutFunc } from "../modules/firebase.js";

function validationNumberInput(numberInput, maxLength,) {
   //input.addEventListener('input', function () {
   //   const inputValue = this.value.toString();
   //   console.log(inputValue);
   //   console.log(inputValue.toLowerCase().search(/^\d{3}\s(?:\D*\d{3}\s*)*$/));
   //   if (inputValue.length > maxLength) {
   //      this.value = inputValue.slice(0, maxLength);
   //   } else if (inputValue.toLowerCase().search(/[^0-9]/g) >= 0 && inputValue.length < 4) {
   //      console.log('reg1');
   //      this.value = this.dataset.previousValue || '';
   //   } else if (inputValue.length == 4 && inputValue[3] != ' ' && inputValue.toLowerCase().search(/[0-9]{3}[0-9]/g) >= 0) {
   //      console.log(' - ');
   //      this.value = inputValue.substring(0, 3) + ' ' + inputValue.substring(3);
   //   } else if (inputValue.toLowerCase().search(/[0-9]{3}\s[^0-9]{1,3}/g) < 0 && inputValue.length > 3) { //&& inputValue.toLowerCase().search(/[^0-9]{3}\s[^0-9]/g) <= 0
   //      console.log('reg2');
   //      this.value = this.dataset.previousValue || '';
   //      //} else if (inputValue.length == 4 && inputValue.toLowerCase().search(/[0-9]{3}[^0-9]/g)) {
   //      //   console.log(' - ');
   //      //   this.value = inputValue.substring(0, 3) + ' ' + inputValue.substring(3);
   //   } else {
   //      this.dataset.previousValue = inputValue;
   //   }
   //})
   //const numberInput = document.getElementById("numberInput");

   numberInput.addEventListener("input", function () {
      const sanitizedValue = this.value.replace(/\D/g, "");
      const firstThreeDigits = sanitizedValue.slice(0, 3);
      const restOfTheDigits = sanitizedValue.slice(3, maxLength);
      const formattedValue = restOfTheDigits.length > 0 ? `${firstThreeDigits} ${restOfTheDigits}` : firstThreeDigits;
      this.value = formattedValue;
   });
}

function editPhone(numberInput) {
   numberInput.addEventListener("input", function () {
      const sanitizedValue = this.value.replace(/\D/g, "");
      const firstDigit = sanitizedValue.slice(0, 1);
      const secondThreeDigits = sanitizedValue.slice(1, 4);
      const thirdThreeDigits = sanitizedValue.slice(4, 7);
      const fourthTwoDigits = sanitizedValue.slice(7, 9);
      const lastTwoDigits = sanitizedValue.slice(9, 11);
      let formattedValue = `${firstDigit}`;
      if (secondThreeDigits.length > 0) {
         formattedValue += ` ${secondThreeDigits}`;
      }
      if (thirdThreeDigits.length > 0) {
         formattedValue += ` ${thirdThreeDigits}`;
      }
      if (fourthTwoDigits.length > 0) {
         formattedValue += ` ${fourthTwoDigits}`;
      }
      if (lastTwoDigits.length > 0) {
         formattedValue += ` ${lastTwoDigits}`;
      }
      this.value = formattedValue;
   });
}

function editNumberCard(numberCardInput) {
   numberCardInput.addEventListener("input", function () {
      const sanitizedValue = this.value.replace(/\D/g, "");
      const firstDigit = sanitizedValue.slice(0, 4);
      const secondThreeDigits = sanitizedValue.slice(4, 8);
      const thirdThreeDigits = sanitizedValue.slice(8, 12);
      const lastTwoDigits = sanitizedValue.slice(12, 16);
      let formattedValue = `${firstDigit}`;
      if (secondThreeDigits.length > 0) {
         formattedValue += ` ${secondThreeDigits}`;
      }
      if (thirdThreeDigits.length > 0) {
         formattedValue += ` ${thirdThreeDigits}`;
      }
      if (lastTwoDigits.length > 0) {
         formattedValue += ` ${lastTwoDigits}`;
      }
      this.value = formattedValue;
   });
}
function editExpiration(expirationInput) {
   expirationInput.addEventListener("input", function () {
      const sanitizedValue = this.value.replace(/\D/g, "");
      const firstDigit = sanitizedValue.slice(0, 2);
      const lastTwoDigits = sanitizedValue.slice(2, 4);
      let formattedValue = `${firstDigit}`;
      if (lastTwoDigits.length > 0) {
         formattedValue += `/${lastTwoDigits}`;
      }
      this.value = formattedValue;
   });
}
function editCvc(cvcInput) {
   cvcInput.addEventListener("input", function () {
      this.value = this.value.replace(/\D/g, "").slice(0, 3);
   });
}
function adjustOptionsListPosition(optionsList, upwardsClass) {
   const windowHeight = window.innerHeight;
   const optionsListHeight = optionsList.clientHeight;
   const optionsListOffsetTop = optionsList.getBoundingClientRect().top;
   if (windowHeight - optionsListOffsetTop < optionsListHeight) {
      optionsList.classList.add(upwardsClass);
   } else {
      optionsList.classList.remove(upwardsClass);
   }
}
function selectItem(target, itemClass, activeItemClass) {
   if (target.classList.contains(itemClass) && target.classList.contains(activeItemClass)) {
      return
   } else {
      return true
   }
}


function renderFilteredCards(products, parentElement, productsType) {
   products.forEach((data) => {
      const card = renderCard(data, productsType, data.id);
      parentElement.appendChild(card);
   })
}
function productsFilter(products, keyParam, valueParam) {
   const filterProducts = [];
   products.forEach((doc) => {
      const data = doc.data().base;
      if (data[keyParam] == valueParam) {
         data.id = doc.id;
         filterProducts.push(data);
      }
   })
   return filterProducts
}
function renderCard(data, productsType, id) {
   const card = document.createElement('a');
   card.href = `product.html?id=${id}`
   card.classList.add('product-card');
   card.innerHTML = `
   <div class="product-card__sale-box ${data.sale == '' ? 'product-card__sale-box--dispaly--none' : ''}">
     <div>-${data.sale}%</div>
   </div>
   <div class="product-card__img-block">
     <div class="product-card__wrapper-img">
     <picture>
     <source srcset="${data.webP}" type="image/webp">
     <img src="${data.png}" alt="${data.name}">
     </picture>
     </div>
   </div>
   <div class="product-card__content">
     <div class="product-card__info-block">
       <div class="product-card__type product-card__type--color--@@type" style="color:${productsType.data()[data.type].text_color}">${productsType.data()[data.type].name}</div>
       <div class="product-card__title">${data.name}</div>
     </div>
     <div class="product-card__prise-block">
       <div class="product-card__prise ${data.sale != '' ? 'product-card__prise--text--strikethrough' : ''}">$${data.price}</div>
       <div class="product-card__sale-prise ${data.sale == '' ? 'product-card__sale-prise--display--none' : ''}">$${(data.sale * data.price / 100).toFixed(2)}</div>
     </div>
   </div>`;
   return card
}
function changeBackgrounHeader(changedLogo) {
   window.addEventListener('scroll', () => {
      const header = document.querySelector('.header');
      if (window.scrollY > 50) {
         header.classList.add('header--active');
         if (changedLogo) {
            changeLogoOfHeader(true);
         }
      } else {
         header.classList.remove('header--active');
         if (changedLogo) {
            changeLogoOfHeader(false);
         }
      }
   })
}

function changeLogoOfHeader(remove) {
   const logo = document.querySelector('.header__logo');
   if (remove) {
      logo.classList.remove('header__logo--color--white');
   } else {
      logo.classList.add('header__logo--color--white');
   }
}

//!!!!Потрібна?
//export async function determineAuthState(link) {
//   try {
//      const user = await signOut(auth);
//      return user
//   } catch (error) {
//      console.log(error);
//   }
//}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*********************************!*\
  !*** ./src/js/pass-recovery.js ***!
  \*********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utilits_classes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilits/classes.js */ "./src/js/utilits/classes.js");
/* harmony import */ var _utilits_function_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utilits/function.js */ "./src/js/utilits/function.js");



const form = document.forms.sign_in;
const regValidator = new _utilits_classes_js__WEBPACK_IMPORTED_MODULE_0__.Validator(form);
const submitBtn = form.querySelector('.recover__submit');

regValidator.blurValidation();

for (let i = 0; i < form.elements.length; i++) {
   const element = form.elements[i];
   element.addEventListener('input', validationForBtn);
}
function validationForBtn() {
   if (regValidator.backgroundValdation()) {
      submitBtn.classList.remove('no-active-button');
   } else {
      submitBtn.classList.add('no-active-button');
   }
}
form.addEventListener('submit', submitFormHandler);
function submitFormHandler(event) {
   event.preventDefault();

   if (regValidator.validation()) {
      try {
         submitBtn.classList.add('no-active-button');
         submitBtn.disabled = true;
         submitBtn.style.cursor = 'not-allowed';

         window.location.replace("subscriptions.html")
      } catch (error) {
         submitBtn.classList.remove('no-active-button')
         submitBtn.disabled = false;
         submitBtn.style.cursor = 'pointer';
         console.log(error);
      }
   }
}

(0,_utilits_function_js__WEBPACK_IMPORTED_MODULE_1__.changeBackgrounHeader)();
})();

/******/ })()
;
//# sourceMappingURL=pass-recovery.min.js.map